// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench.proto

#include "bench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_bench_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GossipParams_bench_2eproto;
namespace bench {
namespace protobuf {
class GossipParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GossipParams> _instance;
} _GossipParams_default_instance_;
class RoutingMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingMessage> _instance;
} _RoutingMessage_default_instance_;
class RoutingMessage_Add_Delete_FieldsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingMessage_Add_Delete_Fields> _instance;
} _RoutingMessage_Add_Delete_Fields_default_instance_;
}  // namespace protobuf
}  // namespace bench
static void InitDefaultsGossipParams_bench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bench::protobuf::_GossipParams_default_instance_;
    new (ptr) ::bench::protobuf::GossipParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bench::protobuf::GossipParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GossipParams_bench_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGossipParams_bench_2eproto}, {}};

static void InitDefaultsRoutingMessage_bench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bench::protobuf::_RoutingMessage_default_instance_;
    new (ptr) ::bench::protobuf::RoutingMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bench::protobuf::RoutingMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoutingMessage_bench_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoutingMessage_bench_2eproto}, {
      &scc_info_GossipParams_bench_2eproto.base,}};

static void InitDefaultsRoutingMessage_Add_Delete_Fields_bench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bench::protobuf::_RoutingMessage_Add_Delete_Fields_default_instance_;
    new (ptr) ::bench::protobuf::RoutingMessage_Add_Delete_Fields();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bench::protobuf::RoutingMessage_Add_Delete_Fields::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoutingMessage_Add_Delete_Fields_bench_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoutingMessage_Add_Delete_Fields_bench_2eproto}, {
      &scc_info_GossipParams_bench_2eproto.base,}};

void InitDefaults_bench_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GossipParams_bench_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingMessage_bench_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingMessage_Add_Delete_Fields_bench_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_bench_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_bench_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_bench_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_bench_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, neighber_count_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, stop_times_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, gossip_type_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, max_hop_num_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, header_hash_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, block_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, msg_hash_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, allow_up_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::GossipParams, allow_low_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, src_node_id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, des_node_id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, type_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, data_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, hop_num_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, is_root_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, bloomfilter_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, broadcast_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, priority_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage, gossip_),
  0,
  1,
  4,
  2,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  3,
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, src_node_id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, des_node_id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, type_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, id_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, hop_num_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, bloomfilter_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, broadcast_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, priority_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, gossip_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, add_field1_),
  PROTOBUF_FIELD_OFFSET(::bench::protobuf::RoutingMessage_Add_Delete_Fields, add_field2_),
  0,
  1,
  4,
  5,
  6,
  ~0u,
  7,
  8,
  3,
  9,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::bench::protobuf::GossipParams)},
  { 23, 39, sizeof(::bench::protobuf::RoutingMessage)},
  { 50, 66, sizeof(::bench::protobuf::RoutingMessage_Add_Delete_Fields)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::bench::protobuf::_GossipParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bench::protobuf::_RoutingMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::bench::protobuf::_RoutingMessage_Add_Delete_Fields_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_bench_2eproto = {
  {}, AddDescriptors_bench_2eproto, "bench.proto", schemas,
  file_default_instances, TableStruct_bench_2eproto::offsets,
  file_level_metadata_bench_2eproto, 3, file_level_enum_descriptors_bench_2eproto, file_level_service_descriptors_bench_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_bench_2eproto = {
  false, InitDefaults_bench_2eproto, 
  "\n\013bench.proto\022\016bench.protobuf\"\277\001\n\014Gossip"
  "Params\022\026\n\016neighber_count\030\001 \001(\r\022\022\n\nstop_t"
  "imes\030\002 \001(\r\022\023\n\013gossip_type\030\003 \001(\r\022\023\n\013max_h"
  "op_num\030\004 \001(\r\022\023\n\013header_hash\030\005 \001(\014\022\r\n\005blo"
  "ck\030\006 \001(\014\022\020\n\010msg_hash\030\007 \001(\r\022\020\n\010allow_up\030\010"
  " \001(\010\022\021\n\tallow_low\030\t \001(\010\"\354\001\n\016RoutingMessa"
  "ge\022\023\n\013src_node_id\030\001 \001(\014\022\023\n\013des_node_id\030\002"
  " \001(\014\022\014\n\004type\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\022\n\n\002id\030\005"
  " \001(\r\022\017\n\007hop_num\030\006 \001(\r\022\017\n\007is_root\030\007 \001(\010\022\023"
  "\n\013bloomfilter\030\010 \003(\004\022\021\n\tbroadcast\030\t \001(\010\022\020"
  "\n\010priority\030\n \001(\r\022,\n\006gossip\030\013 \001(\0132\034.bench"
  ".protobuf.GossipParams\"\207\002\n RoutingMessag"
  "e_Add_Delete_Fields\022\023\n\013src_node_id\030\001 \001(\014"
  "\022\023\n\013des_node_id\030\002 \001(\014\022\014\n\004type\030\003 \001(\r\022\n\n\002i"
  "d\030\005 \001(\r\022\017\n\007hop_num\030\006 \001(\r\022\023\n\013bloomfilter\030"
  "\010 \003(\004\022\021\n\tbroadcast\030\t \001(\010\022\020\n\010priority\030\n \001"
  "(\r\022,\n\006gossip\030\013 \001(\0132\034.bench.protobuf.Goss"
  "ipParams\022\022\n\nadd_field1\030\014 \001(\r\022\022\n\nadd_fiel"
  "d2\030\r \001(\014"
,
  "bench.proto", &assign_descriptors_table_bench_2eproto, 728,
};

void AddDescriptors_bench_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_bench_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bench_2eproto = []() { AddDescriptors_bench_2eproto(); return true; }();
namespace bench {
namespace protobuf {

// ===================================================================

void GossipParams::InitAsDefaultInstance() {
}
class GossipParams::HasBitSetters {
 public:
  static void set_has_neighber_count(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_stop_times(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_gossip_type(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_max_hop_num(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_header_hash(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_block(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg_hash(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_allow_up(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_allow_low(GossipParams* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GossipParams::kNeighberCountFieldNumber;
const int GossipParams::kStopTimesFieldNumber;
const int GossipParams::kGossipTypeFieldNumber;
const int GossipParams::kMaxHopNumFieldNumber;
const int GossipParams::kHeaderHashFieldNumber;
const int GossipParams::kBlockFieldNumber;
const int GossipParams::kMsgHashFieldNumber;
const int GossipParams::kAllowUpFieldNumber;
const int GossipParams::kAllowLowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GossipParams::GossipParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bench.protobuf.GossipParams)
}
GossipParams::GossipParams(const GossipParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_hash()) {
    header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
  }
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  ::memcpy(&neighber_count_, &from.neighber_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_low_) -
    reinterpret_cast<char*>(&neighber_count_)) + sizeof(allow_low_));
  // @@protoc_insertion_point(copy_constructor:bench.protobuf.GossipParams)
}

void GossipParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GossipParams_bench_2eproto.base);
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&neighber_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_low_) -
      reinterpret_cast<char*>(&neighber_count_)) + sizeof(allow_low_));
}

GossipParams::~GossipParams() {
  // @@protoc_insertion_point(destructor:bench.protobuf.GossipParams)
  SharedDtor();
}

void GossipParams::SharedDtor() {
  header_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GossipParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GossipParams& GossipParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GossipParams_bench_2eproto.base);
  return *internal_default_instance();
}


void GossipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bench.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      header_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      block_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&neighber_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_up_) -
        reinterpret_cast<char*>(&neighber_count_)) + sizeof(allow_up_));
  }
  allow_low_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GossipParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GossipParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 neighber_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_neighber_count(value);
        break;
      }
      // optional uint32 stop_times = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_stop_times(value);
        break;
      }
      // optional uint32 gossip_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_gossip_type(value);
        break;
      }
      // optional uint32 max_hop_num = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_max_hop_num(value);
        break;
      }
      // optional bytes header_hash = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_header_hash();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes block = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_block();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint32 msg_hash = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_msg_hash(value);
        break;
      }
      // optional bool allow_up = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_allow_up(value);
        break;
      }
      // optional bool allow_low = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_allow_low(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GossipParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bench.protobuf.GossipParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 neighber_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_neighber_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighber_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stop_times = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stop_times(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gossip_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gossip_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gossip_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hop_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_hop_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hop_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes block = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msg_hash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_msg_hash(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_up = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_allow_up(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_low = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_allow_low(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bench.protobuf.GossipParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bench.protobuf.GossipParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GossipParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bench.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 neighber_count = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->neighber_count(), output);
  }

  // optional uint32 stop_times = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stop_times(), output);
  }

  // optional uint32 gossip_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gossip_type(), output);
  }

  // optional uint32 max_hop_num = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_hop_num(), output);
  }

  // optional bytes header_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->header_hash(), output);
  }

  // optional bytes block = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->block(), output);
  }

  // optional uint32 msg_hash = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msg_hash(), output);
  }

  // optional bool allow_up = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_up(), output);
  }

  // optional bool allow_low = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->allow_low(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bench.protobuf.GossipParams)
}

::google::protobuf::uint8* GossipParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bench.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 neighber_count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->neighber_count(), target);
  }

  // optional uint32 stop_times = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stop_times(), target);
  }

  // optional uint32 gossip_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gossip_type(), target);
  }

  // optional uint32 max_hop_num = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_hop_num(), target);
  }

  // optional bytes header_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->header_hash(), target);
  }

  // optional bytes block = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->block(), target);
  }

  // optional uint32 msg_hash = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msg_hash(), target);
  }

  // optional bool allow_up = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_up(), target);
  }

  // optional bool allow_low = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->allow_low(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bench.protobuf.GossipParams)
  return target;
}

size_t GossipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bench.protobuf.GossipParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes header_hash = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_hash());
    }

    // optional bytes block = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

    // optional uint32 neighber_count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighber_count());
    }

    // optional uint32 stop_times = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_times());
    }

    // optional uint32 gossip_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gossip_type());
    }

    // optional uint32 max_hop_num = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hop_num());
    }

    // optional uint32 msg_hash = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_hash());
    }

    // optional bool allow_up = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool allow_low = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bench.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipParams* source =
      ::google::protobuf::DynamicCastToGenerated<GossipParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bench.protobuf.GossipParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bench.protobuf.GossipParams)
    MergeFrom(*source);
  }
}

void GossipParams::MergeFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bench.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
    }
    if (cached_has_bits & 0x00000004u) {
      neighber_count_ = from.neighber_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      stop_times_ = from.stop_times_;
    }
    if (cached_has_bits & 0x00000010u) {
      gossip_type_ = from.gossip_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_hop_num_ = from.max_hop_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      msg_hash_ = from.msg_hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      allow_up_ = from.allow_up_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_allow_low(from.allow_low());
  }
}

void GossipParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bench.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipParams::CopyFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bench.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipParams::IsInitialized() const {
  return true;
}

void GossipParams::Swap(GossipParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GossipParams::InternalSwap(GossipParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_hash_.Swap(&other->header_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(neighber_count_, other->neighber_count_);
  swap(stop_times_, other->stop_times_);
  swap(gossip_type_, other->gossip_type_);
  swap(max_hop_num_, other->max_hop_num_);
  swap(msg_hash_, other->msg_hash_);
  swap(allow_up_, other->allow_up_);
  swap(allow_low_, other->allow_low_);
}

::google::protobuf::Metadata GossipParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bench_2eproto);
  return ::file_level_metadata_bench_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoutingMessage::InitAsDefaultInstance() {
  ::bench::protobuf::_RoutingMessage_default_instance_._instance.get_mutable()->gossip_ = const_cast< ::bench::protobuf::GossipParams*>(
      ::bench::protobuf::GossipParams::internal_default_instance());
}
class RoutingMessage::HasBitSetters {
 public:
  static void set_has_src_node_id(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_des_node_id(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_id(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_hop_num(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_is_root(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_broadcast(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_priority(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::bench::protobuf::GossipParams& gossip(const RoutingMessage* msg);
  static void set_has_gossip(RoutingMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::bench::protobuf::GossipParams&
RoutingMessage::HasBitSetters::gossip(const RoutingMessage* msg) {
  return *msg->gossip_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingMessage::kSrcNodeIdFieldNumber;
const int RoutingMessage::kDesNodeIdFieldNumber;
const int RoutingMessage::kTypeFieldNumber;
const int RoutingMessage::kDataFieldNumber;
const int RoutingMessage::kIdFieldNumber;
const int RoutingMessage::kHopNumFieldNumber;
const int RoutingMessage::kIsRootFieldNumber;
const int RoutingMessage::kBloomfilterFieldNumber;
const int RoutingMessage::kBroadcastFieldNumber;
const int RoutingMessage::kPriorityFieldNumber;
const int RoutingMessage::kGossipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingMessage::RoutingMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bench.protobuf.RoutingMessage)
}
RoutingMessage::RoutingMessage(const RoutingMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_node_id()) {
    src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
  }
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_node_id()) {
    des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_gossip()) {
    gossip_ = new ::bench::protobuf::GossipParams(*from.gossip_);
  } else {
    gossip_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&type_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:bench.protobuf.RoutingMessage)
}

void RoutingMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RoutingMessage_bench_2eproto.base);
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gossip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&gossip_)) + sizeof(priority_));
}

RoutingMessage::~RoutingMessage() {
  // @@protoc_insertion_point(destructor:bench.protobuf.RoutingMessage)
  SharedDtor();
}

void RoutingMessage::SharedDtor() {
  src_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gossip_;
}

void RoutingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingMessage& RoutingMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoutingMessage_bench_2eproto.base);
  return *internal_default_instance();
}


void RoutingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:bench.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      src_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      des_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gossip_ != NULL);
      gossip_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_root_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_root_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&broadcast_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&broadcast_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoutingMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoutingMessage*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes src_node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_src_node_id();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes des_node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_des_node_id();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint32 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_type(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint32 id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint32 hop_num = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_hop_num(value);
        break;
      }
      // optional bool is_root = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_is_root(value);
        break;
      }
      // repeated uint64 bloomfilter = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::uint64 value = val;
            msg->add_bloomfilter(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_bloomfilter();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool broadcast = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_broadcast(value);
        break;
      }
      // optional uint32 priority = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_priority(value);
        break;
      }
      // optional .bench.protobuf.GossipParams gossip = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::bench::protobuf::GossipParams::_InternalParse;
        object = msg->mutable_gossip();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoutingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bench.protobuf.RoutingMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_hop_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_root = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_root(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bloomfilter = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64u, input, this->mutable_bloomfilter())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloomfilter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_broadcast(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .bench.protobuf.GossipParams gossip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gossip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bench.protobuf.RoutingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bench.protobuf.RoutingMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoutingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bench.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_node_id(), output);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->des_node_id(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // optional uint32 hop_num = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hop_num(), output);
  }

  // optional bool is_root = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_root(), output);
  }

  // repeated uint64 bloomfilter = 8;
  for (int i = 0, n = this->bloomfilter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->bloomfilter(i), output);
  }

  // optional bool broadcast = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->broadcast(), output);
  }

  // optional uint32 priority = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->priority(), output);
  }

  // optional .bench.protobuf.GossipParams gossip = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::gossip(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bench.protobuf.RoutingMessage)
}

::google::protobuf::uint8* RoutingMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bench.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_node_id(), target);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->des_node_id(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // optional uint32 hop_num = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hop_num(), target);
  }

  // optional bool is_root = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_root(), target);
  }

  // repeated uint64 bloomfilter = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(8, this->bloomfilter_, target);

  // optional bool broadcast = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->broadcast(), target);
  }

  // optional uint32 priority = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->priority(), target);
  }

  // optional .bench.protobuf.GossipParams gossip = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::gossip(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bench.protobuf.RoutingMessage)
  return target;
}

size_t RoutingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bench.protobuf.RoutingMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bloomfilter = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloomfilter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes src_node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_node_id());
    }

    // optional bytes des_node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_node_id());
    }

    // optional bytes data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .bench.protobuf.GossipParams gossip = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gossip_);
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 hop_num = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_num());
    }

    // optional bool is_root = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool broadcast = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bench.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingMessage* source =
      ::google::protobuf::DynamicCastToGenerated<RoutingMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bench.protobuf.RoutingMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bench.protobuf.RoutingMessage)
    MergeFrom(*source);
  }
}

void RoutingMessage::MergeFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bench.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gossip()->::bench::protobuf::GossipParams::MergeFrom(from.gossip());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      hop_num_ = from.hop_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_root_ = from.is_root_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      broadcast_ = from.broadcast_;
    }
    if (cached_has_bits & 0x00000200u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bench.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingMessage::CopyFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bench.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingMessage::IsInitialized() const {
  return true;
}

void RoutingMessage::Swap(RoutingMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingMessage::InternalSwap(RoutingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  src_node_id_.Swap(&other->src_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_node_id_.Swap(&other->des_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gossip_, other->gossip_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(hop_num_, other->hop_num_);
  swap(is_root_, other->is_root_);
  swap(broadcast_, other->broadcast_);
  swap(priority_, other->priority_);
}

::google::protobuf::Metadata RoutingMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bench_2eproto);
  return ::file_level_metadata_bench_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoutingMessage_Add_Delete_Fields::InitAsDefaultInstance() {
  ::bench::protobuf::_RoutingMessage_Add_Delete_Fields_default_instance_._instance.get_mutable()->gossip_ = const_cast< ::bench::protobuf::GossipParams*>(
      ::bench::protobuf::GossipParams::internal_default_instance());
}
class RoutingMessage_Add_Delete_Fields::HasBitSetters {
 public:
  static void set_has_src_node_id(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_des_node_id(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_id(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_hop_num(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_broadcast(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_priority(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::bench::protobuf::GossipParams& gossip(const RoutingMessage_Add_Delete_Fields* msg);
  static void set_has_gossip(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_add_field1(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_add_field2(RoutingMessage_Add_Delete_Fields* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::bench::protobuf::GossipParams&
RoutingMessage_Add_Delete_Fields::HasBitSetters::gossip(const RoutingMessage_Add_Delete_Fields* msg) {
  return *msg->gossip_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingMessage_Add_Delete_Fields::kSrcNodeIdFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kDesNodeIdFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kTypeFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kIdFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kHopNumFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kBloomfilterFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kBroadcastFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kPriorityFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kGossipFieldNumber;
const int RoutingMessage_Add_Delete_Fields::kAddField1FieldNumber;
const int RoutingMessage_Add_Delete_Fields::kAddField2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingMessage_Add_Delete_Fields::RoutingMessage_Add_Delete_Fields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bench.protobuf.RoutingMessage_Add_Delete_Fields)
}
RoutingMessage_Add_Delete_Fields::RoutingMessage_Add_Delete_Fields(const RoutingMessage_Add_Delete_Fields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_node_id()) {
    src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
  }
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_node_id()) {
    des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
  }
  add_field2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_add_field2()) {
    add_field2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_field2_);
  }
  if (from.has_gossip()) {
    gossip_ = new ::bench::protobuf::GossipParams(*from.gossip_);
  } else {
    gossip_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_field1_) -
    reinterpret_cast<char*>(&type_)) + sizeof(add_field1_));
  // @@protoc_insertion_point(copy_constructor:bench.protobuf.RoutingMessage_Add_Delete_Fields)
}

void RoutingMessage_Add_Delete_Fields::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RoutingMessage_Add_Delete_Fields_bench_2eproto.base);
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_field2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gossip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_field1_) -
      reinterpret_cast<char*>(&gossip_)) + sizeof(add_field1_));
}

RoutingMessage_Add_Delete_Fields::~RoutingMessage_Add_Delete_Fields() {
  // @@protoc_insertion_point(destructor:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  SharedDtor();
}

void RoutingMessage_Add_Delete_Fields::SharedDtor() {
  src_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_field2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gossip_;
}

void RoutingMessage_Add_Delete_Fields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingMessage_Add_Delete_Fields& RoutingMessage_Add_Delete_Fields::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoutingMessage_Add_Delete_Fields_bench_2eproto.base);
  return *internal_default_instance();
}


void RoutingMessage_Add_Delete_Fields::Clear() {
// @@protoc_insertion_point(message_clear_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      src_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      des_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      add_field2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gossip_ != NULL);
      gossip_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_) -
        reinterpret_cast<char*>(&type_)) + sizeof(broadcast_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&add_field1_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(add_field1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoutingMessage_Add_Delete_Fields::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoutingMessage_Add_Delete_Fields*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes src_node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_src_node_id();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes des_node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_des_node_id();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint32 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_type(value);
        break;
      }
      // optional uint32 id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint32 hop_num = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_hop_num(value);
        break;
      }
      // repeated uint64 bloomfilter = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::uint64 value = val;
            msg->add_bloomfilter(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_bloomfilter();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool broadcast = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_broadcast(value);
        break;
      }
      // optional uint32 priority = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_priority(value);
        break;
      }
      // optional .bench.protobuf.GossipParams gossip = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::bench::protobuf::GossipParams::_InternalParse;
        object = msg->mutable_gossip();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional uint32 add_field1 = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_add_field1(value);
        break;
      }
      // optional bytes add_field2 = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_add_field2();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoutingMessage_Add_Delete_Fields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_hop_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bloomfilter = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64u, input, this->mutable_bloomfilter())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloomfilter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_broadcast(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .bench.protobuf.GossipParams gossip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gossip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 add_field1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_add_field1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_field1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes add_field2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_field2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoutingMessage_Add_Delete_Fields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_node_id(), output);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->des_node_id(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // optional uint32 hop_num = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hop_num(), output);
  }

  // repeated uint64 bloomfilter = 8;
  for (int i = 0, n = this->bloomfilter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->bloomfilter(i), output);
  }

  // optional bool broadcast = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->broadcast(), output);
  }

  // optional uint32 priority = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->priority(), output);
  }

  // optional .bench.protobuf.GossipParams gossip = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::gossip(this), output);
  }

  // optional uint32 add_field1 = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->add_field1(), output);
  }

  // optional bytes add_field2 = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->add_field2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bench.protobuf.RoutingMessage_Add_Delete_Fields)
}

::google::protobuf::uint8* RoutingMessage_Add_Delete_Fields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_node_id(), target);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->des_node_id(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // optional uint32 hop_num = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hop_num(), target);
  }

  // repeated uint64 bloomfilter = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(8, this->bloomfilter_, target);

  // optional bool broadcast = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->broadcast(), target);
  }

  // optional uint32 priority = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->priority(), target);
  }

  // optional .bench.protobuf.GossipParams gossip = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::gossip(this), deterministic, target);
  }

  // optional uint32 add_field1 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->add_field1(), target);
  }

  // optional bytes add_field2 = 13;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->add_field2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  return target;
}

size_t RoutingMessage_Add_Delete_Fields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bloomfilter = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloomfilter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes src_node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_node_id());
    }

    // optional bytes des_node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_node_id());
    }

    // optional bytes add_field2 = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->add_field2());
    }

    // optional .bench.protobuf.GossipParams gossip = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gossip_);
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 hop_num = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_num());
    }

    // optional bool broadcast = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 priority = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 add_field1 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_field1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingMessage_Add_Delete_Fields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingMessage_Add_Delete_Fields* source =
      ::google::protobuf::DynamicCastToGenerated<RoutingMessage_Add_Delete_Fields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bench.protobuf.RoutingMessage_Add_Delete_Fields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bench.protobuf.RoutingMessage_Add_Delete_Fields)
    MergeFrom(*source);
  }
}

void RoutingMessage_Add_Delete_Fields::MergeFrom(const RoutingMessage_Add_Delete_Fields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      add_field2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_field2_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gossip()->::bench::protobuf::GossipParams::MergeFrom(from.gossip());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      hop_num_ = from.hop_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000200u) {
      add_field1_ = from.add_field1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingMessage_Add_Delete_Fields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingMessage_Add_Delete_Fields::CopyFrom(const RoutingMessage_Add_Delete_Fields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bench.protobuf.RoutingMessage_Add_Delete_Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingMessage_Add_Delete_Fields::IsInitialized() const {
  return true;
}

void RoutingMessage_Add_Delete_Fields::Swap(RoutingMessage_Add_Delete_Fields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingMessage_Add_Delete_Fields::InternalSwap(RoutingMessage_Add_Delete_Fields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  src_node_id_.Swap(&other->src_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_node_id_.Swap(&other->des_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  add_field2_.Swap(&other->add_field2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gossip_, other->gossip_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(hop_num_, other->hop_num_);
  swap(broadcast_, other->broadcast_);
  swap(priority_, other->priority_);
  swap(add_field1_, other->add_field1_);
}

::google::protobuf::Metadata RoutingMessage_Add_Delete_Fields::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bench_2eproto);
  return ::file_level_metadata_bench_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace bench
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::bench::protobuf::GossipParams* Arena::CreateMaybeMessage< ::bench::protobuf::GossipParams >(Arena* arena) {
  return Arena::CreateInternal< ::bench::protobuf::GossipParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bench::protobuf::RoutingMessage* Arena::CreateMaybeMessage< ::bench::protobuf::RoutingMessage >(Arena* arena) {
  return Arena::CreateInternal< ::bench::protobuf::RoutingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::bench::protobuf::RoutingMessage_Add_Delete_Fields* Arena::CreateMaybeMessage< ::bench::protobuf::RoutingMessage_Add_Delete_Fields >(Arena* arena) {
  return Arena::CreateInternal< ::bench::protobuf::RoutingMessage_Add_Delete_Fields >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
