// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench.proto

#ifndef PROTOBUF_INCLUDED_bench_2eproto
#define PROTOBUF_INCLUDED_bench_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bench_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bench_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bench_2eproto();
namespace bench {
namespace protobuf {
class GossipParams;
class GossipParamsDefaultTypeInternal;
extern GossipParamsDefaultTypeInternal _GossipParams_default_instance_;
class RoutingMessage;
class RoutingMessageDefaultTypeInternal;
extern RoutingMessageDefaultTypeInternal _RoutingMessage_default_instance_;
}  // namespace protobuf
}  // namespace bench
namespace google {
namespace protobuf {
template<> ::bench::protobuf::GossipParams* Arena::CreateMaybeMessage<::bench::protobuf::GossipParams>(Arena*);
template<> ::bench::protobuf::RoutingMessage* Arena::CreateMaybeMessage<::bench::protobuf::RoutingMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bench {
namespace protobuf {

// ===================================================================

class GossipParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bench.protobuf.GossipParams) */ {
 public:
  GossipParams();
  virtual ~GossipParams();

  GossipParams(const GossipParams& from);

  inline GossipParams& operator=(const GossipParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GossipParams(GossipParams&& from) noexcept
    : GossipParams() {
    *this = ::std::move(from);
  }

  inline GossipParams& operator=(GossipParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GossipParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipParams* internal_default_instance() {
    return reinterpret_cast<const GossipParams*>(
               &_GossipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GossipParams* other);
  friend void swap(GossipParams& a, GossipParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipParams* New() const final {
    return CreateMaybeMessage<GossipParams>(NULL);
  }

  GossipParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GossipParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GossipParams& from);
  void MergeFrom(const GossipParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header_hash = 5;
  bool has_header_hash() const;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 5;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_header_hash(::std::string&& value);
  #endif
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // optional bytes block = 6;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 6;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // optional uint32 neighber_count = 1;
  bool has_neighber_count() const;
  void clear_neighber_count();
  static const int kNeighberCountFieldNumber = 1;
  ::google::protobuf::uint32 neighber_count() const;
  void set_neighber_count(::google::protobuf::uint32 value);

  // optional uint32 stop_times = 2;
  bool has_stop_times() const;
  void clear_stop_times();
  static const int kStopTimesFieldNumber = 2;
  ::google::protobuf::uint32 stop_times() const;
  void set_stop_times(::google::protobuf::uint32 value);

  // optional int32 gossip_type = 3;
  bool has_gossip_type() const;
  void clear_gossip_type();
  static const int kGossipTypeFieldNumber = 3;
  ::google::protobuf::int32 gossip_type() const;
  void set_gossip_type(::google::protobuf::int32 value);

  // optional uint32 max_hop_num = 4;
  bool has_max_hop_num() const;
  void clear_max_hop_num();
  static const int kMaxHopNumFieldNumber = 4;
  ::google::protobuf::uint32 max_hop_num() const;
  void set_max_hop_num(::google::protobuf::uint32 value);

  // optional uint32 msg_hash = 7;
  bool has_msg_hash() const;
  void clear_msg_hash();
  static const int kMsgHashFieldNumber = 7;
  ::google::protobuf::uint32 msg_hash() const;
  void set_msg_hash(::google::protobuf::uint32 value);

  // optional bool allow_up = 8;
  bool has_allow_up() const;
  void clear_allow_up();
  static const int kAllowUpFieldNumber = 8;
  bool allow_up() const;
  void set_allow_up(bool value);

  // optional bool allow_low = 9;
  bool has_allow_low() const;
  void clear_allow_low();
  static const int kAllowLowFieldNumber = 9;
  bool allow_low() const;
  void set_allow_low(bool value);

  // @@protoc_insertion_point(class_scope:bench.protobuf.GossipParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::uint32 neighber_count_;
  ::google::protobuf::uint32 stop_times_;
  ::google::protobuf::int32 gossip_type_;
  ::google::protobuf::uint32 max_hop_num_;
  ::google::protobuf::uint32 msg_hash_;
  bool allow_up_;
  bool allow_low_;
  friend struct ::TableStruct_bench_2eproto;
};
// -------------------------------------------------------------------

class RoutingMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bench.protobuf.RoutingMessage) */ {
 public:
  RoutingMessage();
  virtual ~RoutingMessage();

  RoutingMessage(const RoutingMessage& from);

  inline RoutingMessage& operator=(const RoutingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingMessage(RoutingMessage&& from) noexcept
    : RoutingMessage() {
    *this = ::std::move(from);
  }

  inline RoutingMessage& operator=(RoutingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoutingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingMessage* internal_default_instance() {
    return reinterpret_cast<const RoutingMessage*>(
               &_RoutingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RoutingMessage* other);
  friend void swap(RoutingMessage& a, RoutingMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingMessage* New() const final {
    return CreateMaybeMessage<RoutingMessage>(NULL);
  }

  RoutingMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingMessage& from);
  void MergeFrom(const RoutingMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bloomfilter = 8;
  int bloomfilter_size() const;
  void clear_bloomfilter();
  static const int kBloomfilterFieldNumber = 8;
  ::google::protobuf::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::google::protobuf::uint64 value);
  void add_bloomfilter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bloomfilter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bloomfilter();

  // optional bytes src_node_id = 1;
  bool has_src_node_id() const;
  void clear_src_node_id();
  static const int kSrcNodeIdFieldNumber = 1;
  const ::std::string& src_node_id() const;
  void set_src_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_src_node_id(::std::string&& value);
  #endif
  void set_src_node_id(const char* value);
  void set_src_node_id(const void* value, size_t size);
  ::std::string* mutable_src_node_id();
  ::std::string* release_src_node_id();
  void set_allocated_src_node_id(::std::string* src_node_id);

  // optional bytes des_node_id = 2;
  bool has_des_node_id() const;
  void clear_des_node_id();
  static const int kDesNodeIdFieldNumber = 2;
  const ::std::string& des_node_id() const;
  void set_des_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_des_node_id(::std::string&& value);
  #endif
  void set_des_node_id(const char* value);
  void set_des_node_id(const void* value, size_t size);
  ::std::string* mutable_des_node_id();
  ::std::string* release_des_node_id();
  void set_allocated_des_node_id(::std::string* des_node_id);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .bench.protobuf.GossipParams gossip = 11;
  bool has_gossip() const;
  void clear_gossip();
  static const int kGossipFieldNumber = 11;
  const ::bench::protobuf::GossipParams& gossip() const;
  ::bench::protobuf::GossipParams* release_gossip();
  ::bench::protobuf::GossipParams* mutable_gossip();
  void set_allocated_gossip(::bench::protobuf::GossipParams* gossip);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional uint32 id = 5;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 hop_num = 6;
  bool has_hop_num() const;
  void clear_hop_num();
  static const int kHopNumFieldNumber = 6;
  ::google::protobuf::uint32 hop_num() const;
  void set_hop_num(::google::protobuf::uint32 value);

  // optional bool is_root = 7;
  bool has_is_root() const;
  void clear_is_root();
  static const int kIsRootFieldNumber = 7;
  bool is_root() const;
  void set_is_root(bool value);

  // optional bool broadcast = 9;
  bool has_broadcast() const;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 9;
  bool broadcast() const;
  void set_broadcast(bool value);

  // optional uint32 priority = 10;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 10;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bench.protobuf.RoutingMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bloomfilter_;
  ::google::protobuf::internal::ArenaStringPtr src_node_id_;
  ::google::protobuf::internal::ArenaStringPtr des_node_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::bench::protobuf::GossipParams* gossip_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 hop_num_;
  bool is_root_;
  bool broadcast_;
  ::google::protobuf::uint32 priority_;
  friend struct ::TableStruct_bench_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GossipParams

// optional uint32 neighber_count = 1;
inline bool GossipParams::has_neighber_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GossipParams::clear_neighber_count() {
  neighber_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 GossipParams::neighber_count() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.neighber_count)
  return neighber_count_;
}
inline void GossipParams::set_neighber_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  neighber_count_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.neighber_count)
}

// optional uint32 stop_times = 2;
inline bool GossipParams::has_stop_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GossipParams::clear_stop_times() {
  stop_times_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 GossipParams::stop_times() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.stop_times)
  return stop_times_;
}
inline void GossipParams::set_stop_times(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stop_times_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.stop_times)
}

// optional int32 gossip_type = 3;
inline bool GossipParams::has_gossip_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GossipParams::clear_gossip_type() {
  gossip_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 GossipParams::gossip_type() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.gossip_type)
  return gossip_type_;
}
inline void GossipParams::set_gossip_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gossip_type_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.gossip_type)
}

// optional uint32 max_hop_num = 4;
inline bool GossipParams::has_max_hop_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GossipParams::clear_max_hop_num() {
  max_hop_num_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 GossipParams::max_hop_num() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.max_hop_num)
  return max_hop_num_;
}
inline void GossipParams::set_max_hop_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_hop_num_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.max_hop_num)
}

// optional bytes header_hash = 5;
inline bool GossipParams::has_header_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipParams::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& GossipParams::header_hash() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.header_hash)
  return header_hash_.GetNoArena();
}
inline void GossipParams::set_header_hash(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.header_hash)
}
#if LANG_CXX11
inline void GossipParams::set_header_hash(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bench.protobuf.GossipParams.header_hash)
}
#endif
inline void GossipParams::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bench.protobuf.GossipParams.header_hash)
}
inline void GossipParams::set_header_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bench.protobuf.GossipParams.header_hash)
}
inline ::std::string* GossipParams::mutable_header_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:bench.protobuf.GossipParams.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_header_hash() {
  // @@protoc_insertion_point(field_release:bench.protobuf.GossipParams.header_hash)
  if (!has_header_hash()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.GossipParams.header_hash)
}

// optional bytes block = 6;
inline bool GossipParams::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipParams::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& GossipParams::block() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.block)
  return block_.GetNoArena();
}
inline void GossipParams::set_block(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.block)
}
#if LANG_CXX11
inline void GossipParams::set_block(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bench.protobuf.GossipParams.block)
}
#endif
inline void GossipParams::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000002u;
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bench.protobuf.GossipParams.block)
}
inline void GossipParams::set_block(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bench.protobuf.GossipParams.block)
}
inline ::std::string* GossipParams::mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:bench.protobuf.GossipParams.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_block() {
  // @@protoc_insertion_point(field_release:bench.protobuf.GossipParams.block)
  if (!has_block()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000002u;
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.GossipParams.block)
}

// optional uint32 msg_hash = 7;
inline bool GossipParams::has_msg_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GossipParams::clear_msg_hash() {
  msg_hash_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 GossipParams::msg_hash() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.msg_hash)
  return msg_hash_;
}
inline void GossipParams::set_msg_hash(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  msg_hash_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.msg_hash)
}

// optional bool allow_up = 8;
inline bool GossipParams::has_allow_up() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GossipParams::clear_allow_up() {
  allow_up_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool GossipParams::allow_up() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.allow_up)
  return allow_up_;
}
inline void GossipParams::set_allow_up(bool value) {
  _has_bits_[0] |= 0x00000080u;
  allow_up_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.allow_up)
}

// optional bool allow_low = 9;
inline bool GossipParams::has_allow_low() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GossipParams::clear_allow_low() {
  allow_low_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool GossipParams::allow_low() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.GossipParams.allow_low)
  return allow_low_;
}
inline void GossipParams::set_allow_low(bool value) {
  _has_bits_[0] |= 0x00000100u;
  allow_low_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.GossipParams.allow_low)
}

// -------------------------------------------------------------------

// RoutingMessage

// optional bytes src_node_id = 1;
inline bool RoutingMessage::has_src_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingMessage::clear_src_node_id() {
  src_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RoutingMessage::src_node_id() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.GetNoArena();
}
inline void RoutingMessage::set_src_node_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.src_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_src_node_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bench.protobuf.RoutingMessage.src_node_id)
}
#endif
inline void RoutingMessage::set_src_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bench.protobuf.RoutingMessage.src_node_id)
}
inline void RoutingMessage::set_src_node_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bench.protobuf.RoutingMessage.src_node_id)
}
inline ::std::string* RoutingMessage::mutable_src_node_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:bench.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_src_node_id() {
  // @@protoc_insertion_point(field_release:bench.protobuf.RoutingMessage.src_node_id)
  if (!has_src_node_id()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_src_node_id(::std::string* src_node_id) {
  if (src_node_id != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_node_id);
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.RoutingMessage.src_node_id)
}

// optional bytes des_node_id = 2;
inline bool RoutingMessage::has_des_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingMessage::clear_des_node_id() {
  des_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RoutingMessage::des_node_id() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.GetNoArena();
}
inline void RoutingMessage::set_des_node_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.des_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_des_node_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bench.protobuf.RoutingMessage.des_node_id)
}
#endif
inline void RoutingMessage::set_des_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bench.protobuf.RoutingMessage.des_node_id)
}
inline void RoutingMessage::set_des_node_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bench.protobuf.RoutingMessage.des_node_id)
}
inline ::std::string* RoutingMessage::mutable_des_node_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:bench.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_des_node_id() {
  // @@protoc_insertion_point(field_release:bench.protobuf.RoutingMessage.des_node_id)
  if (!has_des_node_id()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000002u;
  return des_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_des_node_id(::std::string* des_node_id) {
  if (des_node_id != NULL) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  des_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des_node_id);
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.RoutingMessage.des_node_id)
}

// optional int32 type = 3;
inline bool RoutingMessage::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 RoutingMessage::type() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.type)
  return type_;
}
inline void RoutingMessage::set_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.type)
}

// optional bytes data = 4;
inline bool RoutingMessage::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& RoutingMessage::data() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.data)
  return data_.GetNoArena();
}
inline void RoutingMessage::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.data)
}
#if LANG_CXX11
inline void RoutingMessage::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bench.protobuf.RoutingMessage.data)
}
#endif
inline void RoutingMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bench.protobuf.RoutingMessage.data)
}
inline void RoutingMessage::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bench.protobuf.RoutingMessage.data)
}
inline ::std::string* RoutingMessage::mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:bench.protobuf.RoutingMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_data() {
  // @@protoc_insertion_point(field_release:bench.protobuf.RoutingMessage.data)
  if (!has_data()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.RoutingMessage.data)
}

// optional uint32 id = 5;
inline bool RoutingMessage::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoutingMessage::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 RoutingMessage::id() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.id)
  return id_;
}
inline void RoutingMessage::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.id)
}

// optional uint32 hop_num = 6;
inline bool RoutingMessage::has_hop_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoutingMessage::clear_hop_num() {
  hop_num_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 RoutingMessage::hop_num() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.hop_num)
  return hop_num_;
}
inline void RoutingMessage::set_hop_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  hop_num_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.hop_num)
}

// optional bool is_root = 7;
inline bool RoutingMessage::has_is_root() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoutingMessage::clear_is_root() {
  is_root_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RoutingMessage::is_root() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.is_root)
  return is_root_;
}
inline void RoutingMessage::set_is_root(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_root_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.is_root)
}

// repeated uint64 bloomfilter = 8;
inline int RoutingMessage::bloomfilter_size() const {
  return bloomfilter_.size();
}
inline void RoutingMessage::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::google::protobuf::uint64 RoutingMessage::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_.Get(index);
}
inline void RoutingMessage::set_bloomfilter(int index, ::google::protobuf::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.bloomfilter)
}
inline void RoutingMessage::add_bloomfilter(::google::protobuf::uint64 value) {
  bloomfilter_.Add(value);
  // @@protoc_insertion_point(field_add:bench.protobuf.RoutingMessage.bloomfilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoutingMessage::bloomfilter() const {
  // @@protoc_insertion_point(field_list:bench.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoutingMessage::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:bench.protobuf.RoutingMessage.bloomfilter)
  return &bloomfilter_;
}

// optional bool broadcast = 9;
inline bool RoutingMessage::has_broadcast() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoutingMessage::clear_broadcast() {
  broadcast_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RoutingMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.broadcast)
  return broadcast_;
}
inline void RoutingMessage::set_broadcast(bool value) {
  _has_bits_[0] |= 0x00000100u;
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.broadcast)
}

// optional uint32 priority = 10;
inline bool RoutingMessage::has_priority() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoutingMessage::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 RoutingMessage::priority() const {
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.priority)
  return priority_;
}
inline void RoutingMessage::set_priority(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:bench.protobuf.RoutingMessage.priority)
}

// optional .bench.protobuf.GossipParams gossip = 11;
inline bool RoutingMessage::has_gossip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingMessage::clear_gossip() {
  if (gossip_ != NULL) gossip_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bench::protobuf::GossipParams& RoutingMessage::gossip() const {
  const ::bench::protobuf::GossipParams* p = gossip_;
  // @@protoc_insertion_point(field_get:bench.protobuf.RoutingMessage.gossip)
  return p != NULL ? *p : *reinterpret_cast<const ::bench::protobuf::GossipParams*>(
      &::bench::protobuf::_GossipParams_default_instance_);
}
inline ::bench::protobuf::GossipParams* RoutingMessage::release_gossip() {
  // @@protoc_insertion_point(field_release:bench.protobuf.RoutingMessage.gossip)
  _has_bits_[0] &= ~0x00000008u;
  ::bench::protobuf::GossipParams* temp = gossip_;
  gossip_ = NULL;
  return temp;
}
inline ::bench::protobuf::GossipParams* RoutingMessage::mutable_gossip() {
  _has_bits_[0] |= 0x00000008u;
  if (gossip_ == NULL) {
    auto* p = CreateMaybeMessage<::bench::protobuf::GossipParams>(GetArenaNoVirtual());
    gossip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bench.protobuf.RoutingMessage.gossip)
  return gossip_;
}
inline void RoutingMessage::set_allocated_gossip(::bench::protobuf::GossipParams* gossip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gossip_;
  }
  if (gossip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gossip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gossip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gossip_ = gossip;
  // @@protoc_insertion_point(field_set_allocated:bench.protobuf.RoutingMessage.gossip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bench

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bench_2eproto
